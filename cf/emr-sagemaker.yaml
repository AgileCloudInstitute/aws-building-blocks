AWSTemplateFormatVersion: 2010-09-09
Description: >
  Creates RBAC EMR.  Creates a SageMaker Studio Domain and associated user profiles. 
  Creates the Studio Domain in a private VPC and establishes connectivity with EMR via runtime roles 
Parameters:
  IdleTimeout: 
    Type: Number
    Description: >-
      Terminate EMR cluster automatically after x amount of seconds of
      inactivity.
    Default: 14400
    ConstraintDescription: Must be between 60 seconds - 7 days (604800 seconds)
  S3CertsZip:
    Type: String
    Description: Enter S3 URI where the certs zip file is located
    AllowedPattern: '^s3://([^/]+)/(.*?([^/]+)/?)$'
  VPC:
    Type: 'AWS::EC2::VPC::Id'
    Description: >-
      VPC to be used for Amazon EMR cluster and Amazon SageMaker Studio , please
      choose the VPC that was created by the lf-foundation.yaml template and given as output variable.
    AllowedPattern: .+
  PrivateSubnet:
    Type: 'AWS::EC2::Subnet::Id'
    Description: >-
      Private Subnet to be used for Amazon EMR cluster and Amazon SageMaker
      Studio , please choose LF-Workshop-PrivateSubnet
    AllowedPattern: .+
  SageMakerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup::Id'
    Description: >-
      Security Group used for  Amazon SageMaker Studio , please choose
      SageMaker-SecurityGroup
    AllowedPattern: .+
  LFEMRScienceBucketName:
    Type: String
    Description: S3 bucket where science emr cluster will write logs
#    AllowedPattern: '^s3://([^/]+)/(.*?([^/]+)/?)$'
Mappings:
  ARNs:
    us-east-1:
      arn: 'arn:aws:sagemaker:us-east-1:081325390199:image/jupyter-server-3'
    us-east-2:
      arn: 'arn:aws:sagemaker:us-east-2:429704687514:image/jupyter-server-3'
    us-west-1:
      arn: 'arn:aws:sagemaker:us-west-1:742091327244:image/jupyter-server-3'
    us-west-2:
      arn: 'arn:aws:sagemaker:us-west-2:236514542706:image/jupyter-server-3'
  Studio:
    s3params:
      S3Bucket: aws-ml-blog
      S3Key: artifacts/sma-milestone1/
  ClusterConfigurations:
    emr:
      masterInstanceType: m5.xlarge
      coreInstanceType: m5.xlarge
      masterInstanceCount: 1
      coreInstanceCount: 2
      emrReleaseVersion: emr-6.9.0
    Bootstrap:
      S3Prefix: customer-bootstrap-actions/gcsc/
      replaceRpms: replace-rpms.sh
      emrSecretAgent: emr-secret-agent-1.18.0-SNAPSHOT20221121212949.noarch.rpm
Resources:
  LakeFormationDataAccessPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: !Sub '${AWS::StackName}-lf-data-access-policy'
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'lakeformation:GetDataAccess'
              - 'glue:GetTable'
              - 'glue:GetTables'
              - 'glue:SearchTables'
              - 'glue:GetDatabase'
              - 'glue:GetDatabases'
              - 'glue:GetPartitions'
              - 'glue:CreateDatabase'
              - 'lakeformation:GetResourceLFTags'
              - 'lakeformation:ListLFTags'
              - 'lakeformation:GetLFTag'
              - 'lakeformation:SearchTablesByLFTags'
              - 'lakeformation:SearchDatabasesByLFTags'
            Resource: '*'
  SageMakerCustomPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: !Sub '${AWS::StackName}-sagemaker-policy'
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'elasticmapreduce:ListInstances'
              - 'elasticmapreduce:DescribeCluster'
              - 'elasticmapreduce:DescribeSecurityConfiguration'
              - 'elasticmapreduce:CreatePersistentAppUI'
              - 'elasticmapreduce:DescribePersistentAppUI'
              - 'elasticmapreduce:GetPersistentAppUIPresignedURL'
              - 'elasticmapreduce:GetOnClusterAppUIPresignedURL'
              - 'elasticmapreduce:ListClusters'
            Resource: '*'
          - Effect: Allow
            Action:
              - 'elasticmapreduce:DescribeCluster'
              - 'elasticmapreduce:ListInstanceGroups'
            Resource: !Sub 'arn:${AWS::Partition}:elasticmapreduce:*:*:cluster/*'
          - Effect: Allow
            Action:
              - 'elasticmapreduce:ListClusters'
            Resource: '*'
  DataScientistNonSensitiveAccessRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - sagemaker.amazonaws.com
                - glue.amazonaws.com
                - lakeformation.amazonaws.com
            Action:
              - 'sts:AssumeRole'
          - Effect: Allow
            Principal:
              AWS:
                - !GetAtt 
                  - EMRClusterinstanceProfileRole
                  - Arn
            Action:
              - 'sts:AssumeRole'
          - Effect: Allow
            Principal:
              AWS:
                - !GetAtt 
                  - EMRClusterinstanceProfileRole
                  - Arn
            Action:
              - 'sts:TagSession'
      RoleName: !Sub '${AWS::StackName}-datascientist-non-sensitive-data-access-role'
      Path: /
      ManagedPolicyArns:
        - !Sub >-
          arn:${AWS::Partition}:iam::aws:policy/service-role/AwsGlueSessionUserRestrictedServiceRole
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonS3ReadOnlyAccess'
        - !Ref LakeFormationDataAccessPolicy
  DataScientistSensitiveAccessRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - sagemaker.amazonaws.com
                - glue.amazonaws.com
                - lakeformation.amazonaws.com
            Action:
              - 'sts:AssumeRole'
          - Effect: Allow
            Principal:
              AWS:
                - !GetAtt 
                  - EMRClusterinstanceProfileRole
                  - Arn
            Action:
              - 'sts:AssumeRole'
          - Effect: Allow
            Principal:
              AWS:
                - !GetAtt 
                  - EMRClusterinstanceProfileRole
                  - Arn
            Action:
              - 'sts:TagSession'
      RoleName: !Sub '${AWS::StackName}-datascientist-sensitive-data-access-role'
      Path: /
      ManagedPolicyArns:
        - !Sub >-
          arn:${AWS::Partition}:iam::aws:policy/service-role/AwsGlueSessionUserRestrictedServiceRole
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonS3ReadOnlyAccess'
        - !Ref LakeFormationDataAccessPolicy
  SageMakerExecutionRole1:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${AWS::StackName}-studio-emr-role-1'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - sagemaker.amazonaws.com
                - glue.amazonaws.com
            Action:
              - 'sts:AssumeRole'
          - Effect: Allow
            Principal:
              AWS:
                - !GetAtt 
                  - EMRClusterinstanceProfileRole
                  - Arn
            Action:
              - 'sts:AssumeRole'
          - Effect: Allow
            Principal:
              AWS:
                - !GetAtt 
                  - EMRClusterinstanceProfileRole
                  - Arn
            Action:
              - 'sts:TagSession'
            Condition:
              StringEquals:
                'aws:RequestTag/LakeFormationAuthorizedCaller': Amazon EMR
      Path: /
      Policies:
        - PolicyName: !Sub '${AWS::StackName}-sage-emr'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: AllowPassRoleSageMaker
                Effect: Allow
                Action:
                  - 'iam:GetRole'
                  - 'iam:PassRole'
                  - 'iam:GetRole'
                Resource:
                  - !GetAtt 
                    - DataScientistSensitiveAccessRole
                    - Arn
              - Sid: AllowClusterCreds
                Effect: Allow
                Action:
                  - 'elasticmapreduce:GetClusterSessionCredentials'
                Resource: '*'
                Condition:
                  StringLike:
                    'elasticmapreduce:ExecutionRoleArn':
                      - !GetAtt 
                        - DataScientistSensitiveAccessRole
                        - Arn
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonSageMakerFullAccess'
        - !Sub >-
          arn:${AWS::Partition}:iam::aws:policy/service-role/AwsGlueSessionUserRestrictedServiceRole
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonS3ReadOnlyAccess'
        - !Ref SageMakerCustomPolicy
  SageMakerExecutionRole2:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${AWS::StackName}-studio-emr-role-2'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - sagemaker.amazonaws.com
                - glue.amazonaws.com
            Action:
              - 'sts:AssumeRole'
          - Effect: Allow
            Principal:
              AWS:
                - !GetAtt 
                  - EMRClusterinstanceProfileRole
                  - Arn
            Action:
              - 'sts:AssumeRole'
          - Effect: Allow
            Principal:
              AWS:
                - !GetAtt 
                  - EMRClusterinstanceProfileRole
                  - Arn
            Action:
              - 'sts:TagSession'
            Condition:
              StringEquals:
                'aws:RequestTag/LakeFormationAuthorizedCaller': Amazon EMR
      Path: /
      Policies:
        - PolicyName: !Sub '${AWS::StackName}-sage-emr'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: AllowPassRoleSageMaker
                Effect: Allow
                Action:
                  - 'iam:GetRole'
                  - 'iam:PassRole'
                  - 'iam:GetRole'
                Resource:
                  - !GetAtt 
                    - DataScientistNonSensitiveAccessRole
                    - Arn
              - Sid: AllowClusterCreds
                Effect: Allow
                Action:
                  - 'elasticmapreduce:GetClusterSessionCredentials'
                Resource: '*'
                Condition:
                  StringLike:
                    'elasticmapreduce:ExecutionRoleArn':
                      - !GetAtt 
                        - DataScientistNonSensitiveAccessRole
                        - Arn
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonSageMakerFullAccess'
        - !Sub >-
          arn:${AWS::Partition}:iam::aws:policy/service-role/AwsGlueSessionUserRestrictedServiceRole
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonS3ReadOnlyAccess'
        - !Ref SageMakerCustomPolicy
  masterSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: EMR Master SG
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC
  slaveSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: EMR Slave SG
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC
  emrServiceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: EMR Service Access SG
      VpcId: !Ref VPC
  emrMasterIngressSelfICMP:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref masterSecurityGroup
      IpProtocol: icmp
      FromPort: -1
      ToPort: -1
      SourceSecurityGroupId: !Ref masterSecurityGroup
  emrMasterIngressSlaveICMP:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref masterSecurityGroup
      IpProtocol: icmp
      FromPort: -1
      ToPort: -1
      SourceSecurityGroupId: !Ref slaveSecurityGroup
  emrMasterIngressSelfAllTcp:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref masterSecurityGroup
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !Ref masterSecurityGroup
  emrMasterIngressSlaveAllTcp:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref masterSecurityGroup
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !Ref slaveSecurityGroup
  emrMasterIngressSelfAllUdp:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref masterSecurityGroup
      IpProtocol: udp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !Ref masterSecurityGroup
  emrMasterIngressSlaveAllUdp:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref masterSecurityGroup
      IpProtocol: udp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !Ref slaveSecurityGroup
  emrMasterIngressLivySG:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref masterSecurityGroup
      IpProtocol: tcp
      FromPort: 8998
      ToPort: 8998
      SourceSecurityGroupId: !Ref SageMakerSecurityGroup
  emrMasterIngressHiveSG:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref masterSecurityGroup
      IpProtocol: tcp
      FromPort: 10000
      ToPort: 10000
      SourceSecurityGroupId: !Ref SageMakerSecurityGroup
  emrMasterIngressServiceSg:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref masterSecurityGroup
      IpProtocol: tcp
      FromPort: 8443
      ToPort: 8443
      SourceSecurityGroupId: !Ref emrServiceSecurityGroup
  emrServiceIngressMasterSg:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref emrServiceSecurityGroup
      IpProtocol: tcp
      FromPort: 9443
      ToPort: 9443
      SourceSecurityGroupId: !Ref masterSecurityGroup
  emrServiceEgressMaster:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      GroupId: !Ref emrServiceSecurityGroup
      IpProtocol: tcp
      FromPort: 8443
      ToPort: 8443
      DestinationSecurityGroupId: !Ref masterSecurityGroup
  emrServiceEgressSlave:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      GroupId: !Ref emrServiceSecurityGroup
      IpProtocol: tcp
      FromPort: 8443
      ToPort: 8443
      DestinationSecurityGroupId: !Ref slaveSecurityGroup
  emrSlaveIngressSelfICMP:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref slaveSecurityGroup
      IpProtocol: icmp
      FromPort: -1
      ToPort: -1
      SourceSecurityGroupId: !Ref slaveSecurityGroup
  emrSlaveIngressMasterICMP:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref slaveSecurityGroup
      IpProtocol: icmp
      FromPort: -1
      ToPort: -1
      SourceSecurityGroupId: !Ref masterSecurityGroup
  emrSlaveIngressSelfAllTcp:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref slaveSecurityGroup
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !Ref slaveSecurityGroup
  emrSlaveIngressMasterAllTcp:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref slaveSecurityGroup
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !Ref masterSecurityGroup
  emrSlaveIngressSelfAllUdp:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref slaveSecurityGroup
      IpProtocol: udp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !Ref slaveSecurityGroup
  emrSlaveIngressMasterAllUdp:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref slaveSecurityGroup
      IpProtocol: udp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !Ref masterSecurityGroup
  emrSlaveIngressServiceSg:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref slaveSecurityGroup
      IpProtocol: tcp
      FromPort: 8443
      ToPort: 8443
      SourceSecurityGroupId: !Ref emrServiceSecurityGroup
  EMRClusterServiceRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - elasticmapreduce.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceRole'
      Path: /
    Type: 'AWS::IAM::Role'
  EMRClusterinstanceProfile:
    Properties:
      Path: /
      Roles:
        - !Ref EMRClusterinstanceProfileRole
    Type: 'AWS::IAM::InstanceProfile'
  EMRClusterinstanceProfileRole:
    Properties:
      RoleName: !Sub '${AWS::StackName}-EMRClusterinstanceProfileRole'
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceforEC2Role'
      Path: /
    Type: 'AWS::IAM::Role'
  AllowEMRClusterinstanceProfileRoleToAssumeSageMakerExecutionRole:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: AllowEMRClusterinstanceProfileRoleToAssumeEMRRoles
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'sts:AssumeRole'
              - 'sts:TagSession'
              - 'iam:GetRole'
            Resource:
              - !GetAtt 
                - SageMakerExecutionRole1
                - Arn
              - !GetAtt 
                - SageMakerExecutionRole2
                - Arn
              - !GetAtt 
                - DataScientistNonSensitiveAccessRole
                - Arn
              - !GetAtt 
                - DataScientistSensitiveAccessRole
                - Arn
      Roles:
        - !Ref EMRClusterinstanceProfileRole
  securityConfiguration:
    Type: 'AWS::EMR::SecurityConfiguration'
    Properties:
      SecurityConfiguration:
        AuthorizationConfiguration:
          LakeFormationConfiguration:
            AuthorizedSessionTagValue: Amazon EMR
          IAMConfiguration:
            EnableApplicationScopedIAMRole: true
            ApplicationScopedIAMRoleConfiguration:
              PropagateSourceIdentity: true
        EncryptionConfiguration:
          EnableInTransitEncryption: true
          EnableAtRestEncryption: false
          InTransitEncryptionConfiguration:
            TLSCertificateConfiguration:
              CertificateProviderType: PEM
              S3Object: !Ref S3CertsZip
  emrMasterIngressKDCSG:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref masterSecurityGroup
      IpProtocol: tcp
      FromPort: 88
      ToPort: 88
      SourceSecurityGroupId: !Ref SageMakerSecurityGroup
  emrMasterIngressKDCAdminSG:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref masterSecurityGroup
      IpProtocol: tcp
      FromPort: 749
      ToPort: 749
      SourceSecurityGroupId: !Ref SageMakerSecurityGroup
  emrMasterIngressKinit464SG:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref masterSecurityGroup
      IpProtocol: tcp
      FromPort: 464
      ToPort: 464
      SourceSecurityGroupId: !Ref SageMakerSecurityGroup
  allowEMRFSAccessForUser1:
    Type: 'AWS::IAM::Role'
    DependsOn: EMRClusterinstanceProfileRole
    Properties:
      RoleName: !Sub '${AWS::StackName}-allowEMRFSAccessForUser1'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub >-
                arn:aws:iam::${AWS::AccountId}:role/${AWS::StackName}-EMRClusterinstanceProfileRole
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: !Sub '${AWS::StackName}-emrFS-user1'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 's3:ListBucket'
                Resource:
                  - !Sub 'arn:aws:s3:::${LFEMRScienceBucketName}'
                Effect: Allow
              - Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                  - 's3:Describe*'
                  - 's3:List*'
                Resource:
                  - !Sub 'arn:aws:s3:::${LFEMRScienceBucketName}/*'
                Effect: Allow
  CopyBootstrapFiles:
    Type: 'Custom::CopyBootstrapFiles'
    Properties:
      ServiceToken: !GetAtt 
        - CopyZipsFunction
        - Arn
      DestBucket: !Ref LFEMRScienceBucketName
      SourceBucket: !Sub 'emr-data-access-control-${AWS::Region}'
      Prefix: !FindInMap 
        - ClusterConfigurations
        - Bootstrap
        - S3Prefix
      Objects:
        - !FindInMap 
          - ClusterConfigurations
          - Bootstrap
          - replaceRpms
        - !FindInMap 
          - ClusterConfigurations
          - Bootstrap
          - emrSecretAgent
  CopyZipsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Path: /
      Policies:
        - PolicyName: lambda-copier
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                  - 's3:DeleteObject'
                Resource:
                  - !Sub 'arn:aws:s3:::${LFEMRScienceBucketName}/*'
  CopyZipsFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: Copies objects from a source S3 bucket to a destination
      Handler: index.handler
      Runtime: python3.8
      Role: !GetAtt 
        - CopyZipsRole
        - Arn
      Timeout: 900
      Code:
        ZipFile: |
          import json
          import logging
          import threading
          import boto3
          import cfnresponse
          def copy_objects(source_bucket, dest_bucket, prefix, objects):
              s3 = boto3.client('s3')
              for o in objects:
                  key = prefix + o
                  copy_source = {
                      'Bucket': source_bucket,
                      'Key': key
                  }
                  print('copy_source: %s' % copy_source)
                  print('dest_bucket = %s'%dest_bucket)
                  print('key = %s' %key)
                  s3.copy_object(CopySource=copy_source, Bucket=dest_bucket,
                        Key=key)
          def delete_objects(bucket, prefix, objects):
              s3 = boto3.client('s3')
              objects = {'Objects': [{'Key': prefix + o} for o in objects]}
              s3.delete_objects(Bucket=bucket, Delete=objects)
          def timeout(event, context):
              logging.error('Execution is about to time out, sending failure response to CloudFormation')
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)
          def handler(event, context):
              # make sure we send a failure to CloudFormation if the function
              # is going to timeout
              timer = threading.Timer((context.get_remaining_time_in_millis()
                        / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()
              print('Received event: %s' % json.dumps(event))
              status = cfnresponse.SUCCESS
              try:
                  source_bucket = event['ResourceProperties']['SourceBucket']
                  dest_bucket = event['ResourceProperties']['DestBucket']
                  prefix = event['ResourceProperties']['Prefix']
                  objects = event['ResourceProperties']['Objects']

                  if event['RequestType'] == 'Delete':
                      delete_objects(dest_bucket, prefix, objects)
                  else:
                      copy_objects(source_bucket, dest_bucket, prefix, objects)
              except Exception as e:
                  logging.error('Exception: %s' % e, exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  timer.cancel()
                  cfnresponse.send(event, context, status, {}, None)
  StudioDomain:
    Type: 'AWS::SageMaker::Domain'
    Properties:
      AppNetworkAccessType: VpcOnly
      AuthMode: IAM
      DomainName: StudioDomainForEMR 
      VpcId: !Ref VPC
      SubnetIds:
        - !Ref PrivateSubnet
      DefaultUserSettings:
        ExecutionRole: !GetAtt 
          - SageMakerExecutionRole1
          - Arn
        JupyterServerAppSettings:
          DefaultResourceSpec:
            SageMakerImageArn: !FindInMap 
              - ARNs
              - !Ref 'AWS::Region'
              - arn
        SecurityGroups:
          - !Ref SageMakerSecurityGroup
  StudioUserProfile1:
    Type: 'AWS::SageMaker::UserProfile'
    Properties:
      DomainId: !Ref StudioDomain
      UserProfileName: lf-datascientist-sensitive
      UserSettings:
        ExecutionRole: !GetAtt 
          - SageMakerExecutionRole1
          - Arn
  StudioUserProfile2:
    Type: 'AWS::SageMaker::UserProfile'
    Properties:
      DomainId: !Ref StudioDomain
      UserProfileName: lf-datascientist-non-sensitive
      UserSettings:
        ExecutionRole: !GetAtt 
          - SageMakerExecutionRole2
          - Arn
  EMRCluster:
    DependsOn:
      - securityConfiguration
    Type: 'AWS::EMR::Cluster'
    Properties:
      Applications:
        - Name: Spark
        - Name: Hive
        - Name: Livy
      BootstrapActions:
        - Name: Install rpm
          ScriptBootstrapAction:
            Path: !Join 
              - ''
              - - !Sub 's3://${LFEMRScienceBucketName}/'
                - !FindInMap 
                  - ClusterConfigurations
                  - Bootstrap
                  - S3Prefix
                - !FindInMap 
                  - ClusterConfigurations
                  - Bootstrap
                  - replaceRpms
            Args:
              - !Join 
                - ''
                - - !Sub 's3://${LFEMRScienceBucketName}/'
                  - !FindInMap 
                    - ClusterConfigurations
                    - Bootstrap
                    - S3Prefix
                  - !FindInMap 
                    - ClusterConfigurations
                    - Bootstrap
                    - emrSecretAgent
      AutoScalingRole: EMR_AutoScaling_DefaultRole
      Configurations:
        - Classification: livy-conf
          ConfigurationProperties:
            livy.server.session.timeout: 12h
        - Classification: spark-defaults
          ConfigurationProperties:
            spark.sql.hive.metastore.sharedPrefixes: >-
              com.amazonaws.services.dynamodbv2,com.amazonaws.emr.recordserver,com.amazon.ws.emr.hadoop.fs
      EbsRootVolumeSize: 100
      Instances:
        CoreInstanceGroup:
          EbsConfiguration:
            EbsBlockDeviceConfigs:
              - VolumeSpecification:
                  SizeInGB: '320'
                  VolumeType: gp2
                VolumesPerInstance: '1'
            EbsOptimized: 'true'
          InstanceCount: !FindInMap 
            - ClusterConfigurations
            - emr
            - coreInstanceCount
          InstanceType: !FindInMap 
            - ClusterConfigurations
            - emr
            - coreInstanceType
          Market: ON_DEMAND
          Name: coreNode
        MasterInstanceGroup:
          EbsConfiguration:
            EbsBlockDeviceConfigs:
              - VolumeSpecification:
                  SizeInGB: '320'
                  VolumeType: gp2
                VolumesPerInstance: '1'
            EbsOptimized: 'true'
          InstanceCount: 1
          InstanceType: !FindInMap 
            - ClusterConfigurations
            - emr
            - masterInstanceType
          Market: ON_DEMAND
          Name: masterNode
        Ec2SubnetId: !Ref PrivateSubnet
        EmrManagedMasterSecurityGroup: !Ref masterSecurityGroup
        EmrManagedSlaveSecurityGroup: !Ref slaveSecurityGroup
        ServiceAccessSecurityGroup: !Ref emrServiceSecurityGroup
        TerminationProtected: false
      JobFlowRole: !Ref EMRClusterinstanceProfile
      LogUri: !Sub 's3://${LFEMRScienceBucketName}/artifacts/sma-milestone1/'
      Name: !Sub '${AWS::StackName}-EMR-Cluster'
      ReleaseLabel: !FindInMap 
        - ClusterConfigurations
        - emr
        - emrReleaseVersion
      ServiceRole: !Ref EMRClusterServiceRole
      VisibleToAllUsers: true
      SecurityConfiguration: !Ref securityConfiguration
      AutoTerminationPolicy:
        IdleTimeout: !Ref IdleTimeout
  CleanUpBucketonDelete:
    DependsOn: CleanUpBucketonDeleteLambda
    Type: 'Custom::emptybucket'
    Properties:
      ServiceToken: !GetAtt 
        - CleanUpBucketonDeleteLambda
        - Arn
      inputBucketName: !Ref LFEMRScienceBucketName
  CleanUpBucketonDeleteLambda:
    DependsOn:
      - CleanUpBucketonDeleteLambdaRole
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: Empty bucket on delete
      Handler: index.lambda_handler
      Role: !GetAtt 
        - CleanUpBucketonDeleteLambdaRole
        - Arn
      Runtime: python3.7
      Timeout: 60
      Code:
        ZipFile: !Join 
          - |+

          - - import json
            - import boto3
            - import urllib3
            - ''
            - 'def empty_bucket(bucket_name):'
            - '    print("Attempting to empty the bucket {0}".format(bucket_name))'
            - '    s3_client = boto3.client(''s3'')'
            - '    s3 = boto3.resource(''s3'')'
            - ''
            - '    try:'
            - '        bucket = s3.Bucket(bucket_name).load()'
            - '    except ClientError:'
            - '        print("Bucket {0} does not exist".format(bucket_name))'
            - '        return'
            - '    # Confirm if versioning is enabled'
            - '    version_status = s3_client.get_bucket_versioning(Bucket=bucket_name)'
            - '    status = version_status.get(''Status'','''')'
            - '    if status == ''Enabled'':'
            - '        version_status = s3_client.put_bucket_versioning(Bucket=bucket_name,'
            - '                                                   VersioningConfiguration={''Status'': ''Suspended''})'
            - '    version_paginator = s3_client.get_paginator(''list_object_versions'')'
            - '    version_iterator = version_paginator.paginate('
            - '        Bucket=bucket_name'
            - '    )'
            - ''
            - '    for page in version_iterator:'
            - '        print(page)'
            - '        if ''DeleteMarkers'' in page:'
            - '            delete_markers = page[''DeleteMarkers'']'
            - '            if delete_markers is not None:'
            - '                for delete_marker in delete_markers:'
            - '                    key = delete_marker[''Key'']'
            - '                    versionId = delete_marker[''VersionId'']'
            - '                    s3_client.delete_object(Bucket=bucket_name, Key=key, VersionId=versionId)'
            - '        if ''Versions'' in page and page[''Versions''] is not None:'
            - '            versions = page[''Versions'']'
            - '            for version in versions:'
            - '                print(version)'
            - '                key = version[''Key'']'
            - '                versionId = version[''VersionId'']'
            - '                s3_client.delete_object(Bucket=bucket_name, Key=key, VersionId=versionId)'
            - '    object_paginator = s3_client.get_paginator(''list_objects_v2'')'
            - '    object_iterator = object_paginator.paginate('
            - '        Bucket=bucket_name'
            - '    )'
            - '    for page in object_iterator:'
            - '        if ''Contents'' in page:'
            - '            for content in page[''Contents'']:'
            - '                key = content[''Key'']'
            - '                s3_client.delete_object(Bucket=bucket_name, Key=content[''Key''])'
            - '    print("Successfully emptied the bucket {0}".format(bucket_name))'
            - ''
            - ''
            - ''
            - 'def lambda_handler(event, context):'
            - '    try:'
            - '        bucket = event[''ResourceProperties''][''inputBucketName'']'
            - '        if event[''RequestType''] == ''Delete'':'
            - '            empty_bucket(bucket)'
            - '        sendResponse(event, context, "SUCCESS")'
            - '    except Exception as e:'
            - '        print(e)'
            - '        sendResponse(event, context, "FAILED")'
            - ''
            - 'def sendResponse(event, context, status):'
            - '    http = urllib3.PoolManager()'
            - '    response_body = {''Status'': status,'
            - '                     ''Reason'': ''Log stream name: '' + context.log_stream_name,'
            - '                     ''PhysicalResourceId'': context.log_stream_name,'
            - '                     ''StackId'': event[''StackId''],'
            - '                     ''RequestId'': event[''RequestId''],'
            - '                     ''LogicalResourceId'': event[''LogicalResourceId''],'
            - '                     ''Data'': json.loads("{}")}'
            - '    http.request(''PUT'', event[''ResponseURL''], body=json.dumps(response_body))'
  CleanUpBucketonDeleteLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: !Sub 'CleanUpBucketonDeleteLambdaPolicy-${AWS::StackName}'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:Get*'
                  - 's3:List*'
                  - 's3:DeleteObject'
                  - 's3:DeleteObjectVersion'
                  - 's3:PutBucketVersioning'
                Resource:
                  - !Sub 'arn:aws:s3:::${LFEMRScienceBucketName}'
                  - !Sub 'arn:aws:s3:::${LFEMRScienceBucketName}/'
                  - !Sub 'arn:aws:s3:::${LFEMRScienceBucketName}/*'
              - Effect: Deny
                Action:
                  - 's3:DeleteBucket'
                Resource: '*'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
  LifeCycleConfigLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: !Sub 'LifeCycleConfigLambdaPolicy-${AWS::StackName}'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'sagemaker:CreateStudioLifecycleConfig'
                  - 'sagemaker:DeleteStudioLifecycleConfig'
                Resource: !Sub >-
                  arn:aws:sagemaker:${AWS::Region}:${AWS::AccountId}:studio-lifecycle-config/*
              - Effect: Allow
                Action:
                  - 'sagemaker:UpdateUserProfile'
                  - 'sagemaker:DeleteUserProfile'
                Resource: !Sub >-
                  arn:aws:sagemaker:${AWS::Region}:${AWS::AccountId}:user-profile/*
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
  LifeCycleConfigLambda:
    DependsOn:
      - SageMakerExecutionRole1
      - SageMakerExecutionRole2
      - StudioUserProfile1
      - StudioUserProfile2
      - DataScientistNonSensitiveAccessRole
      - DataScientistSensitiveAccessRole
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: Add LifeCycle Configuration files to Studio
      Handler: index.lambda_handler
      Role: !GetAtt 
        - LifeCycleConfigLambdaRole
        - Arn
      Runtime: python3.9
      Timeout: 60
      Code:
        ZipFile: !Join 
          - |+

          - - import boto3
            - import base64
            - import cfnresponse
            - ''
            - client = boto3.client('sagemaker')
            - lcc_up1 = '\n'.join((
            - '    ''#!/bin/bash'','
            - '    '''','
            - '    ''set -eux'','
            - '    '''','
            - '    ''FILE_DIRECTORY="/home/sagemaker-user/.sagemaker-analytics-configuration-DO_NOT_DELETE"'','
            - '    ''FILE_NAME="emr-configurations-DO_NOT_DELETE.json"'','
            - '    ''FILE="$FILE_DIRECTORY/$FILE_NAME"'','
            - '    '''','
            - '    ''mkdir -p $FILE_DIRECTORY'','
            - '    '''','
            - '    ''cat <<\''EOF\'' > "$FILE"'','
            - '    ''{'','
            - '    '' "emr-execution-role-arns":'','
            - '    '' {'','
            - !Sub '    ''    "${AWS::AccountId}": [ '','
            - !Sub '    ''      "${DataScientistSensitiveAccessRole.Arn}",'''
            - '    ''   ]'','
            - '    '' }'','
            - '    ''}'','
            - '    ''EOF'''
            - ))
            - ''
            - lcc_up2 = '\n'.join((
            - '    ''#!/bin/bash'','
            - '    '''','
            - '    ''set -eux'','
            - '    '''','
            - '    ''FILE_DIRECTORY="/home/sagemaker-user/.sagemaker-analytics-configuration-DO_NOT_DELETE"'','
            - '    ''FILE_NAME="emr-configurations-DO_NOT_DELETE.json"'','
            - '    ''FILE="$FILE_DIRECTORY/$FILE_NAME"'','
            - '    '''','
            - '    ''mkdir -p $FILE_DIRECTORY'','
            - '    '''','
            - '    ''cat <<\''EOF\'' > "$FILE"'','
            - '    ''{'','
            - '    '' "emr-execution-role-arns":'','
            - '    '' {'','
            - !Sub '    ''    "${AWS::AccountId}": [ '','
            - !Sub '    ''      "${DataScientistNonSensitiveAccessRole.Arn}"'''
            - '    ''   ]'','
            - '    '' }'','
            - '    ''}'','
            - '    ''EOF'''
            - ))
            - ''
            - !Sub 'lcc_name_up1 = "${AWS::StackName}-LCC-UP1"'
            - !Sub 'lcc_name_up2 = "${AWS::StackName}-LCC-UP2"'
            - !Sub 'up1 = "${StudioUserProfile1}"'
            - !Sub 'up2 = "${StudioUserProfile2}"'
            - ''
            - 'def get_lcc_base64_string(lcc_string):'
            - '    lcc_bytes = lcc_string.encode("ascii")'
            - '    base64_lcc_bytes = base64.b64encode(lcc_bytes)'
            - '    base64_lcc_string = base64_lcc_bytes.decode("ascii")'
            - '    return base64_lcc_string'
            - ''
            - ''
            - >-
              def apply_lcc_to_user_profile(base64_lcc_string, lcc_config_name,
              profile):
            - '    response = client.create_studio_lifecycle_config('
            - '        StudioLifecycleConfigName=lcc_config_name,'
            - '        StudioLifecycleConfigContent=base64_lcc_string,'
            - '        StudioLifecycleConfigAppType="JupyterServer",'
            - '   )'
            - ''
            - '    lcc_arn = response["StudioLifecycleConfigArn"]'
            - '    update_up = client.update_user_profile('
            - '        DomainId=profile.split("|")[1],'
            - '        UserProfileName=profile.split("|")[0],'
            - '        UserSettings={'
            - '            "JupyterServerAppSettings": {'
            - '                "DefaultResourceSpec": {"LifecycleConfigArn": lcc_arn},'
            - '                "LifecycleConfigArns": [lcc_arn]'
            - '            }'
            - '        }'
            - '    )'
            - '    return update_up'
            - ''
            - ''
            - 'def lambda_handler(event, context):'
            - '    print(event)'
            - '    try:'
            - '        base64_lcc_up1_string = get_lcc_base64_string(lcc_up1)'
            - '        base64_lcc_up2_string = get_lcc_base64_string(lcc_up2)'
            - '        updated_up1 = apply_lcc_to_user_profile('
            - '            base64_lcc_up1_string,'
            - '            lcc_name_up1,'
            - '            up1'
            - '        )'
            - '        print("Response User Profile LCC update for UP1")'
            - '        print(updated_up1)'
            - ''
            - '        updated_up2 = apply_lcc_to_user_profile('
            - '            base64_lcc_up2_string,'
            - '            lcc_name_up2,'
            - '            up2'
            - '        )'
            - ''
            - '        print("Response User Profile LCC update for UP2")'
            - '        print(updated_up2)'
            - ''
            - '        response_value = 120'
            - '        response_data = {"Data": response_value}'
            - '        cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)'
            - '    except Exception as e:'
            - '        if "RequestType" in event:'
            - '            if event["RequestType"] == "Delete":'
            - '                try:'
            - '                    response1 = client.delete_studio_lifecycle_config('
            - '                        StudioLifecycleConfigName=lcc_name_up1'
            - '                    )'
            - '                    print(response1)'
            - '                    response2 = client.delete_studio_lifecycle_config('
            - '                        StudioLifecycleConfigName=lcc_name_up2'
            - '                    )'
            - '                    print(response2)'
            - '                    response_data = {}'
            - '                    cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)'
            - '                    return'
            - '                except Exception as e2:'
            - '                    print(e2)'
            - '                    response_data = {"Data": str(e2)}'
            - '                    cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)'
            - '                    return'
            - '        print(e)'
            - '        response_data = {"Data": str(e)}'
            - '        cfnresponse.send(event, context, cfnresponse.FAILED, response_data)'
  LifeCycleConfigLambdaInvoke:
    Type: 'AWS::CloudFormation::CustomResource'
    DependsOn: LifeCycleConfigLambda
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt 
        - LifeCycleConfigLambda
        - Arn
Outputs:
  EMRMasterDNSName:
    Description: DNS Name of the EMR Master Node
    Value: !GetAtt 
      - EMRCluster
      - MasterPublicDNS
