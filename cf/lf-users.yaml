Description: Create IAM users who will interact with the Lake House appliance. 
#Mappings:
#  SubnetConfig:
#    VPC:
#      CIDR: 10.0.0.0/16
#    PublicOne:
#      CIDR: 10.0.0.0/24
#    PublicTwo:
#      CIDR: 10.0.1.0/24
#    Private:
#      CIDR: 10.0.2.0/24
#  Constants:
#    EC2InstanceType:
#      Name: t2.small
#    AutoHibernateTimeout:
#      Name: 30
Parameters:
  GlobalAdminName:
    Type: String
    Default: DataLakeAdministrativeUser1
    Description: Name of the AWS administrator user that will run these cloud formation templates.
#  VPCName:
#    Type: String
#    Default: LF-Workshop-VPC
#    Description: Name of the VPC from which the Lake House will be orchestrated.
#  PrivateSubnetName:
#    Type: String
#    Default: LF-Workshop-PrivateSubnet
#    Description: Name of the private subnet.
#  PublicSubnet1Name:
#    Type: String
#    Default: LF-Workshop-PublicSubnetOne
#    Description: Name of the first public subnet.
#  PublicSubnet2Name:
#    Type: String
#    Default: LF-Workshop-PublicSubnetTwo
#    Description: Name of the second public subnet.
#  InternetGatewayName:
#    Type: String
#    Default: LF-Workshop-IG
#    Description: Name of the internet gateway.
#  NATGatewayName:
#    Type: String
#    Default: LF-NAT-Gateway
#    Description: Name of the NAT gateway.
#  NATRouteTableName:
#    Type: String
#    Default: LF-NAT-RouteTable
#    Description: Name of the route table for the NAT gateway.
  GlueRoleName:
    Type: String
    Default: LF-GlueServiceRole
    Description: Name of role for Glue service.
  GlueDataAnalystRoleName:
    Type: String
    Default: DA-GlueServiceRole
    Description: Name of the data analysts role for glue service.
  GlueDataEngineerRoleName:
    Type: String
    Default: DE-GlueServiceRole
    Description: Name of the data engineer role for glue service
#  EC2BackupRestoreName:
#    Type: String
#    Default: EC2-DB-Loader
#    Description: Name of the EC2 instance used for backup and restore.
#  CrawlerName:
#    Type: String
#    Default: TPC Crawler
#    Description: Name of the Glue Crawler that will be created.
  DataAdministratorUserName:
    Type: String
    Default: lf-data-admin
    Description: Name of a user who will be the data administrator.
  DataScienceUserName:
    Type: String
    Default: lf-data-scientist
    Description: Name of a user who will be a data scientist.
  DataAnalystUserName:
    Type: String
    Default: lf-data-analyst
    Description: Name of a user who will be a data analyst.
  DataEngineerUserName:
    Type: String
    Default: lf-data-engineer
    Description: Name of a user who will be a data engineer.
  LakeFormationDemoBucket:
    Type: String
    Default: lf-workshop
    Description: Name of s3 bucket into which resources will be placed.
#  DataLakeBucketName:
#    Type: String
#    Default: lf-data-lake
#    Description: Name of s3 bucket into which data lake data will be placed.
#  TPCDBName:
#    Type: String
#    Default: tpc
#    AllowedValues:
#      - tpc
#    Description: Name of the database that will be created.
#  DBMasterUser: 
#    Type: String
#    Default: tpcadmin
#    Description: Master username for TPC database.
#  DBMasterPassword:
#    Type: String
#    Default: BigData26!
#    Description: Master password for TPC database.
#  EEKeyPair:
#    Description: Amazon EC2 Key Pair
#    Type: 'AWS::EC2::KeyPair::KeyName'
#    MinLength: 1
#  LatestAmiId:
#    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
#    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
#    AllowedValues:
#      - /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
#    Description: Image ID for the EC2 helper instance. DO NOT change this.
Resources:
#  LakeFormationVPC:
#    Type: 'AWS::EC2::VPC'
#    Properties:
#      CidrBlock: !FindInMap 
#        - SubnetConfig
#        - VPC
#        - CIDR
#      InstanceTenancy: default
#      EnableDnsSupport: 'true'
#      EnableDnsHostnames: 'true'
#      Tags:
#        - Key: Name
#          Value: !Ref VPCName
#  PrivateSubnet:
#    Type: 'AWS::EC2::Subnet'
#    Properties:
#      CidrBlock: !FindInMap 
#        - SubnetConfig
#        - Private
#        - CIDR
#      MapPublicIpOnLaunch: 'true'
#      AvailabilityZone: !Select 
#        - 1
#        - !GetAZs 
#          Ref: 'AWS::Region'
#      VpcId: !Ref LakeFormationVPC
#      Tags:
#        - Key: Name
#          Value: !Ref PrivateSubnetName
#  PublicSubnetOne:
#    Type: 'AWS::EC2::Subnet'
#    Properties:
#      CidrBlock: !FindInMap 
#        - SubnetConfig
#        - PublicOne
#        - CIDR
#      MapPublicIpOnLaunch: 'true'
#      AvailabilityZone: !Select 
#        - 0
#        - !GetAZs 
#          Ref: 'AWS::Region'
#      VpcId: !Ref LakeFormationVPC
#      Tags:
#        - Key: Name
#          Value: !Ref PublicSubnet1Name
#  PublicSubnetTwo:
#    Type: 'AWS::EC2::Subnet'
#    Properties:
#      CidrBlock: !FindInMap 
#        - SubnetConfig
#        - PublicTwo
#        - CIDR
#      MapPublicIpOnLaunch: 'true'
#      AvailabilityZone: !Select 
#        - 1
#        - !GetAZs 
#          Ref: 'AWS::Region'
#      VpcId: !Ref LakeFormationVPC
#      Tags:
#        - Key: Name
#          Value: !Ref PublicSubnet2Name
#  InternetGateway:
#    Type: 'AWS::EC2::InternetGateway'
#    Properties:
#      Tags:
#        - Key: Name
#          Value: !Ref InternetGatewayName
#  VPCGatewayAttachment:
#    Type: 'AWS::EC2::VPCGatewayAttachment'
#    Properties:
#      VpcId: !Ref LakeFormationVPC
#      InternetGatewayId: !Ref InternetGateway
#  InternetGatewayRouteTable:
#    Type: 'AWS::EC2::RouteTable'
#    Properties:
#      VpcId: !Ref LakeFormationVPC
#  InternetGatewayRoute:
#    Type: 'AWS::EC2::Route'
#    DependsOn: VPCGatewayAttachment
#    Properties:
#      DestinationCidrBlock: 0.0.0.0/0
#      RouteTableId: !Ref InternetGatewayRouteTable
#      GatewayId: !Ref InternetGateway
#  PublicSubnetOneRouteTableAssociation:
#    Type: 'AWS::EC2::SubnetRouteTableAssociation'
#    Properties:
#      RouteTableId: !Ref InternetGatewayRouteTable
#      SubnetId: !Ref PublicSubnetOne
#  PublicSubnetTwoRouteTableAssociation:
#    Type: 'AWS::EC2::SubnetRouteTableAssociation'
#    Properties:
#      RouteTableId: !Ref InternetGatewayRouteTable
#      SubnetId: !Ref PublicSubnetTwo
#  NATGatewayAttachment:
#    Type: 'AWS::EC2::EIP'
#    DependsOn: VPCGatewayAttachment
#    Properties:
#      Domain: vpc
#  NATGateway:
#    Type: 'AWS::EC2::NatGateway'
#    Properties:
#      SubnetId: !Ref PublicSubnetOne
#      AllocationId: !GetAtt 
#        - NATGatewayAttachment
#        - AllocationId
#      Tags:
#        - Key: Name
#          Value: !Ref NATGatewayName
#  NATGatewayRouteTable:
#    Type: 'AWS::EC2::RouteTable'
#    Properties:
#      VpcId: !Ref LakeFormationVPC
#      Tags:
#        - Key: Name
#          Value: !Ref NATRouteTableName
#  NATGatewayRoute:
#    Type: 'AWS::EC2::Route'
#    Properties:
#      DestinationCidrBlock: 0.0.0.0/0
#      RouteTableId: !Ref NATGatewayRouteTable
#      NatGatewayId: !Ref NATGateway
#  PrivateSubnetRouteTableAssociation:
#    Type: 'AWS::EC2::SubnetRouteTableAssociation'
#    Properties:
#      RouteTableId: !Ref NATGatewayRouteTable
#      SubnetId: !Ref PrivateSubnet
#  S3Endpoint:
#    Type: 'AWS::EC2::VPCEndpoint'
#    Properties:
#      PolicyDocument:
#        Version: 2012-10-17
#        Statement:
#          - Effect: Allow
#            Action: '*'
#            Principal: '*'
#            Resource: '*'
#      RouteTableIds:
#        - !Ref NATGatewayRouteTable
#        - !Ref InternetGatewayRouteTable
#      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
#      VpcId: !Ref LakeFormationVPC
#  GlueServiceRole:
#    Type: 'AWS::IAM::Role'
#    Properties:
#      AssumeRolePolicyDocument:
#        Version: 2012-10-17
#        Statement:
#          - Effect: Allow
#            Principal:
#              Service:
#                - glue.amazonaws.com
#                - lakeformation.amazonaws.com
#                - firehose.amazonaws.com
#            Action: 'sts:AssumeRole'
#      ManagedPolicyArns:
#        - 'arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole'
#        - 'arn:aws:iam::aws:policy/AmazonKinesisFullAccess'
#      Policies:
#        - PolicyName: LakeFormation-Data-Lake-Storage-Policy
#          PolicyDocument:
#            Version: 2012-10-17
#            Statement:
#              - Effect: Allow
#                Action:
#                  - 's3:*'
#                Resource:
#                  - !Join 
#                    - ''
#                    - - 'arn:aws:s3:::'
#                      - !Ref DataLakeBucket
#                      - /*
#                  - !Join 
#                    - ''
#                    - - 'arn:aws:s3:::'
#                      - !Ref DataLakeBucket
#        - PolicyName: Glue-Demo-Access-Policy
#          PolicyDocument:
#            Version: 2012-10-17
#            Statement:
#              - Effect: Allow
#                Action:
#                  - 's3:*'
#                Resource:
#                  - !Join 
#                    - ''
#                    - - 'arn:aws:s3:::'
#                      - !Ref LakeFormationDemoBucket
#                      - /*
#                  - !Join 
#                    - ''
#                    - - 'arn:aws:s3:::'
#                      - !Ref LakeFormationDemoBucket
#        - PolicyName: LakeFormation-DataAccess-Policy
#          PolicyDocument:
#            Version: 2012-10-17
#            Statement:
#              - Effect: Allow
#                Action:
#                  - 'lakeformation:GetDataAccess'
#                  - 'lakeformation:GrantPermissions'
#                Resource: '*'
#        - PolicyName: LakeFormation-Workflow-Policy
#          PolicyDocument:
#            Version: 2012-10-17
#            Statement:
#              - Effect: Allow
#                Action:
#                  - 'iam:PassRole'
#                Resource:
#                  - !Join 
#                    - ''
#                    - - 'arn:aws:iam::'
#                      - !Ref 'AWS::AccountId'
#                      - !Sub ':role/${GlueRoleName}'
#                  - !Join 
#                    - ''
#                    - - 'arn:aws:iam::'
#                      - !Ref 'AWS::AccountId'
#                      - ':role/LakeFormationWorkflowRole'
#      RoleName: !Ref GlueRoleName
#  DataAnalystGlueServiceRole:
#    Type: 'AWS::IAM::Role'
#    Properties:
#      AssumeRolePolicyDocument:
#        Version: 2012-10-17
#        Statement:
#          - Effect: Allow
#            Principal:
#              Service:
#                - glue.amazonaws.com
#                - lakeformation.amazonaws.com
#                - firehose.amazonaws.com
#            Action: 'sts:AssumeRole'
#      ManagedPolicyArns:
#        - 'arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole'
#        - 'arn:aws:iam::aws:policy/AmazonKinesisFullAccess'
#      Policies:
#        - PolicyName: DA-Data-Lake-Storage-Policy
#          PolicyDocument:
#            Version: 2012-10-17
#            Statement:
#              - Effect: Allow
#                Action:
#                  - 's3:*'
#                Resource:
#                  - !Join
#                    - ''
#                    - - 'arn:aws:s3:::'
#                      - !Ref DataLakeBucket
#                      - /*
#                  - !Join
#                    - ''
#                    - - 'arn:aws:s3:::'
#                      - !Ref DataLakeBucket
#        - PolicyName: DA-Glue-Access-Policy
#          PolicyDocument:
#            Version: 2012-10-17
#            Statement:
#              - Effect: Allow
#                Action:
#                  - 's3:*'
#                Resource:
#                  - !Join
#                    - ''
#                    - - 'arn:aws:s3:::'
#                      - !Ref LakeFormationDemoBucket
#                      - /*
#                  - !Join
#                    - ''
#                    - - 'arn:aws:s3:::'
#                      - !Ref LakeFormationDemoBucket
#        - PolicyName: DA-DataAccess-Policy
#          PolicyDocument:
#            Version: 2012-10-17
#            Statement:
#              - Effect: Allow
#                Action:
#                  - 'lakeformation:GetDataAccess'
#                  - 'lakeformation:GrantPermissions'
#                Resource: '*'
#        - PolicyName: DA-Workflow-Policy
#          PolicyDocument:
#            Version: 2012-10-17
#            Statement:
#              - Effect: Allow
#                Action:
#                  - 'iam:PassRole'
#                Resource:
#                  - !Join
#                    - ''
#                    - - 'arn:aws:iam::'
#                      - !Ref 'AWS::AccountId'
#                      - !Sub ':role/${GlueDataAnalystRoleName}'
#                  - !Join
#                    - ''
#                    - - 'arn:aws:iam::'
#                      - !Ref 'AWS::AccountId'
#                      - ':role/LakeFormationWorkflowRole'
#      RoleName: !Ref GlueDataAnalystRoleName
#  DataEngineerGlueServiceRole:
#    Type: 'AWS::IAM::Role'
#    Properties:
#      AssumeRolePolicyDocument:
#        Version: 2012-10-17
#        Statement:
#          - Effect: Allow
#            Principal:
#              Service:
#                - glue.amazonaws.com
#                - lakeformation.amazonaws.com
#                - firehose.amazonaws.com
#            Action: 'sts:AssumeRole'
#      ManagedPolicyArns:
#        - 'arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole'
#        - 'arn:aws:iam::aws:policy/AmazonKinesisFullAccess'
#      Policies:
#        - PolicyName: DE-Data-Lake-Storage-Policy
#          PolicyDocument:
#            Version: 2012-10-17
#            Statement:
#              - Effect: Allow
#                Action:
#                  - 's3:*'
#                Resource:
#                  - !Join
#                    - ''
#                    - - 'arn:aws:s3:::'
#                      - !Ref DataLakeBucket
#                      - /*
#                  - !Join
#                    - ''
#                    - - 'arn:aws:s3:::'
#                      - !Ref DataLakeBucket
#        - PolicyName: DE-Glue-Access-Policy
#          PolicyDocument:
#            Version: 2012-10-17
#            Statement:
#              - Effect: Allow
#                Action:
#                  - 's3:*'
#                Resource:
#                  - !Join
#                    - ''
#                    - - 'arn:aws:s3:::'
#                      - !Ref LakeFormationDemoBucket
#                      - /*
#                  - !Join
#                    - ''
#                    - - 'arn:aws:s3:::'
#                      - !Ref LakeFormationDemoBucket
#        - PolicyName: DE-DataAccess-Policy
#          PolicyDocument:
#            Version: 2012-10-17
#            Statement:
#              - Effect: Allow
#                Action:
#                  - 'lakeformation:GetDataAccess'
#                  - 'lakeformation:GrantPermissions'
#                Resource: '*'
#        - PolicyName: DA-Workflow-Policy
#          PolicyDocument:
#            Version: 2012-10-17
#            Statement:
#              - Effect: Allow
#                Action:
#                  - 'iam:PassRole'
#                Resource:
#                  - !Join
#                    - ''
#                    - - 'arn:aws:iam::'
#                      - !Ref 'AWS::AccountId'
#                      - !Sub ':role/${GlueDataEngineerRoleName}'
#                  - !Join
#                    - ''
#                    - - 'arn:aws:iam::'
#                      - !Ref 'AWS::AccountId'
#                      - ':role/LakeFormationWorkflowRole'
#      RoleName: !Ref GlueDataEngineerRoleName
#  AmazonKinesisFirehoseFullAccess:
#    Type: 'AWS::IAM::Role'
#    Properties:
#      AssumeRolePolicyDocument:
#        Version: 2012-10-17
#        Statement:
#          - Effect: Allow
#            Principal:
#              Service:
#                - firehose.amazonaws.com
#            Action: 'sts:AssumeRole'
#      ManagedPolicyArns:
#        - 'arn:aws:iam::aws:policy/AmazonKinesisFirehoseFullAccess'
#      Policies:
#        - PolicyName: LakeFormation-Stream-Data-Storage-Policy
#          PolicyDocument:
#            Version: 2012-10-17
#            Statement:
#              - Effect: Allow
#                Action:
#                  - 's3:*'
#                Resource:
#                  - !Join 
#                    - ''
#                    - - 'arn:aws:s3:::'
#                      - !Ref DataLakeBucket
#                      - /*
#                  - !Join 
#                    - ''
#                    - - 'arn:aws:s3:::'
#                      - !Ref DataLakeBucket
#      RoleName: LakeHouse-KinesisServiceRole
#  DataLakeBucket:
#    Type: 'AWS::S3::Bucket'
#    Properties:
#      OwnershipControls:
#        Rules:
#          - ObjectOwnership: BucketOwnerPreferred
#      BucketName: !Join 
#        - '-'
#        - - !Ref DataLakeBucketName
#          - !Ref 'AWS::AccountId'
#  LakeFormationDemoBucket:
#    Type: 'AWS::S3::Bucket'
#    Properties:
#      OwnershipControls:
#        Rules:
#          - ObjectOwnership: BucketOwnerPreferred
#      BucketName: !Join 
#        - '-'
#        - - !Ref LakeFormationDemoBucketName
#          - !Ref 'AWS::AccountId'
  LFUsersPassword:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Description: Secret password for all users created by this template
      Name: !Sub '${AWS::StackName}-users-credentials'
      GenerateSecretString:
        SecretStringTemplate: '{"username":"all-lakeformation-users"}'
        GenerateStringKey: password
        PasswordLength: 16
        ExcludeCharacters: '"@/\'
#  ADFSUsersPassword:
#    Type: 'AWS::SecretsManager::Secret'
#    Properties:
#      Description: Secret password for all ADFS users
#      Name: !Sub '${AWS::StackName}-adfs-users-credentials'
#      SecretString: '{"username":"all-windows-users","password":"Password1!"}'
  DataAdministratorUser:
    Type: 'AWS::IAM::User'
    Properties:
      Path: /
      LoginProfile:
        Password: !Sub '{{resolve:secretsmanager:${LFUsersPassword}::password}}'
        PasswordResetRequired: false
      Policies:
        - PolicyName: LakeFormation-DataLake-Admin-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'iam:CreateServiceLinkedRole'
                Resource: '*'
                Condition:
                  StringEquals:
                    'iam:AWSServiceName': lakeformation.amazonaws.com
              - Effect: Allow
                Action:
                  - 'iam:PutRolePolicy'
                Resource: !Join 
                  - ''
                  - - 'arn:aws:iam::'
                    - !Ref 'AWS::AccountId'
                    - >-
                      :role/aws-service-role/lakeformation.amazonaws.com/AWSServiceRoleForLakeFormationDataAccess
              - Effect: Allow
                Action: 'iam:PassRole'
                Resource:
                  - !Sub 'arn:aws:iam::*:role/${GlueRoleName}'
        - PolicyName: LakeFormation-DataLake-Admin-RAM-Invitation-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ram:AcceptResourceShareInvitation'
                  - 'ram:RejectResourceShareInvitation'
                  - 'ec2:DescribeAvailabilityZones'
                  - 'ram:EnableSharingWithAwsOrganization'
                Resource: '*'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AWSLakeFormationDataAdmin'
        - 'arn:aws:iam::aws:policy/AWSGlueConsoleFullAccess'
        - 'arn:aws:iam::aws:policy/AWSLakeFormationCrossAccountManager'
        - 'arn:aws:iam::aws:policy/AWSCloudFormationFullAccess'
      UserName: !Ref DataAdministratorUserName

  # add DatalakeAdmin as a DL Admin September 2023
  LFDataLakeSettings:
    DependsOn: DataAdministratorUser
    Type: AWS::LakeFormation::DataLakeSettings
    Properties:
      Admins:
        - DataLakePrincipalIdentifier: !GetAtt 'DataAdministratorUser.Arn'
        - DataLakePrincipalIdentifier: !Sub "arn:aws:iam::${AWS::AccountId}:user/${GlobalAdminName}"
      TrustedResourceOwners: []
      CreateDatabaseDefaultPermissions: []
      CreateTableDefaultPermissions: []
      Parameters:
        "CROSS_ACCOUNT_VERSION": "3"

  DataScienceUser:
    Type: 'AWS::IAM::User'
    Properties:
      Path: /
      LoginProfile:
        Password: !Sub '{{resolve:secretsmanager:${LFUsersPassword}::password}}'
        PasswordResetRequired: false
      Policies:
        - PolicyName: LakeFormation-Athena-Query-Result-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:Put*'
                  - 's3:Get*'
                  - 's3:List*'
                Resource:
                  - !Join 
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref LakeFormationDemoBucket
                      - /athena-results/*
        - PolicyName: LakeFormation-Cell-Level-Filter-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'lakeformation:StartQueryPlanning'
                  - 'lakeformation:GetQueryState'
                  - 'lakeformation:GetWorkUnits'
                  - 'lakeformation:GetWorkUnitResults'
                Resource: '*'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonAthenaFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'
      UserName: !Ref DataScienceUserName
  DataAnalystUser:
    Type: 'AWS::IAM::User'
    Properties:
      Path: /
      LoginProfile:
        Password: !Sub '{{resolve:secretsmanager:${LFUsersPassword}::password}}'
        PasswordResetRequired: false
      Policies:
        - PolicyName: LakeFormation-Athena-Query-Result-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:Put*'
                  - 's3:Get*'
                  - 's3:List*'
                Resource:
                  - !Join 
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref LakeFormationDemoBucket
                      - /athena-results/*
        - PolicyName: LakeFormation-Athena-Run-Tagging-Query
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'lakeformation:StartQueryPlanning'
                  - 'lakeformation:GetQueryState'
                  - 'lakeformation:GetWorkUnits'
                  - 'lakeformation:GetWorkUnitResults'
                Resource: "*"
        - PolicyName: LakeFormation-PassRole
          PolicyDocument:
            Version: 2012-10-17
            Statement: 
              - Effect: Allow
                Action: 'iam:PassRole'
                Resource:
                  - !Sub 'arn:aws:iam::*:role/${GlueDataAnalystRoleName}'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonAthenaFullAccess'
        - 'arn:aws:iam::aws:policy/AWSGlueConsoleFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonRedshiftDataFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonRedshiftFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonRedshiftQueryEditorV2FullAccess'
      UserName: !Ref DataAnalystUserName
  DataEngineerUser:
    Type: 'AWS::IAM::User'
    Properties:
      Path: /
      LoginProfile:
        Password: !Sub '{{resolve:secretsmanager:${LFUsersPassword}::password}}'
        PasswordResetRequired: false
      Policies:
        - PolicyName: LakeFormation-Athena-Query-Result-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:Put*'
                  - 's3:Get*'
                  - 's3:List*'
                Resource:
                  - !Join 
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref LakeFormationDemoBucket
                      - /athena-results/*
        - PolicyName: LakeFormation-PassRole
          PolicyDocument:
            Version: 2012-10-17
            Statement: 
              - Effect: Allow
                Action: 'iam:PassRole'
                Resource:
                  - !Sub 'arn:aws:iam::*:role/${GlueDataEngineerRoleName}'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonAthenaFullAccess'
        - 'arn:aws:iam::aws:policy/AWSGlueConsoleFullAccess'
      UserName: !Ref DataEngineerUserName
#  EC2Role:
#    Type: 'AWS::IAM::Role'
#    Properties:
#      Path: /
#      RoleName: EC2Role
#      AssumeRolePolicyDocument:
#        Version: 2012-10-17
#        Statement:
#          - Effect: Allow
#            Principal:
#              Service:
#                - ec2.amazonaws.com
#            Action: 'sts:AssumeRole'
#      ManagedPolicyArns:
#        - 'arn:aws:iam::aws:policy/AdministratorAccess'
#  EC2InstanceProfile:
#    Type: 'AWS::IAM::InstanceProfile'
#    Properties:
#      Path: /
#      Roles:
#        - !Ref EC2Role
#  BackUpRestoreInstance:
#    Type: 'AWS::EC2::Instance'
#    Properties:
#      InstanceType: t2.small
#      ImageId: !Ref LatestAmiId
#      KeyName: !Ref EEKeyPair
#      IamInstanceProfile: !Ref EC2InstanceProfile
#      NetworkInterfaces:
#        - AssociatePublicIpAddress: 'true'
#          DeviceIndex: '0'
#          SubnetId: !Ref PublicSubnetOne
#      UserData: !Base64 
#        'Fn::Join':
#          - ''
#          - - |
#              #!/bin/bash -ex
#            - |
#              sudo yum -y install mysql
#            - >
#              aws s3 cp
#              s3://aws-data-analytics-workshops/shared_datasets/tpcparquet/
#              /tmp/tpcparquet/ --recursive
#            - 'aws s3 cp /tmp/tpcparquet/ s3://'
#            - !Ref DataLakeBucket
#            - |
#              /tpcparquet/ --recursive
#            - |+
#
#            - >
#              aws s3 cp
#              s3://aws-data-analytics-workshops/lake-formation-workshop/sampledata/tripdata.csv
#              /tmp/
#            - 'aws s3 cp /tmp/tripdata.csv s3://'
#            - !Ref LakeFormationDemoBucket
#            - |
#              /glue/nyctaxi/
#            - >
#              aws s3 cp
#              s3://aws-data-analytics-workshops/lake-formation-workshop/scripts/nyctaxi-csv-to-json.py
#              /tmp/
#            - 'aws s3 cp /tmp/nyctaxi-csv-to-json.py s3://'
#            - !Ref LakeFormationDemoBucket
#            - |
#              /glue/scripts/
#
#      Tags:
#        - Key: Name
#          Value: !Ref EC2BackupRestoreName
#  GlueCrawler:
#    Type: 'AWS::Glue::Crawler'
#    Properties:
#      DatabaseName: tpc
#      Description: AWS Glue Crawler to crawl parquet data
#      Name: !Ref CrawlerName
#      Role: !GetAtt 
#        - GlueServiceRole
#        - Arn
#      Targets:
#        S3Targets:
#          - Path: !Join 
#              - ''
#              - - !Ref DataLakeBucket
#                - /tpcparquet/
#      SchemaChangePolicy:
#        UpdateBehavior: UPDATE_IN_DATABASE
#        DeleteBehavior: LOG
#  VPCEndpointSagemakerAPI:
#    Type: 'AWS::EC2::VPCEndpoint'
#    Properties:
#      PolicyDocument:
#        Version: 2012-10-17
#        Statement:
#          - Effect: Allow
#            Principal: '*'
#            Action: '*'
#            Resource: '*'
#      VpcEndpointType: Interface
#      PrivateDnsEnabled: true
#      SubnetIds:
#        - !Ref PrivateSubnet
#      SecurityGroupIds:
#        - !Ref VPCEndpointSecurityGroup
#      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.sagemaker.api'
#      VpcId: !Ref LakeFormationVPC
#  VPCEndpointSageMakerRuntime:
#    Type: 'AWS::EC2::VPCEndpoint'
#    Properties:
#      PolicyDocument:
#        Version: 2012-10-17
#        Statement:
#          - Effect: Allow
#            Principal: '*'
#            Action: '*'
#            Resource: '*'
#      VpcEndpointType: Interface
#      PrivateDnsEnabled: true
#      SubnetIds:
#        - !Ref PrivateSubnet
#      SecurityGroupIds:
#        - !Ref VPCEndpointSecurityGroup
#      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.sagemaker.runtime'
#      VpcId: !Ref LakeFormationVPC
#  VPCEndpointSTS:
#    Type: 'AWS::EC2::VPCEndpoint'
#    Properties:
#      PolicyDocument:
#        Version: 2012-10-17
#        Statement:
#          - Effect: Allow
#            Principal: '*'
#            Action: '*'
#            Resource: '*'
#      VpcEndpointType: Interface
#      PrivateDnsEnabled: true
#      SubnetIds:
#        - !Ref PrivateSubnet
#      SecurityGroupIds:
#        - !Ref VPCEndpointSecurityGroup
#      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.sts'
#      VpcId: !Ref LakeFormationVPC
#  VPCEndpointCW:
#    Type: 'AWS::EC2::VPCEndpoint'
#    Properties:
#      PolicyDocument:
#        Version: 2012-10-17
#        Statement:
#          - Effect: Allow
#            Principal: '*'
#            Action: '*'
#            Resource: '*'
#      VpcEndpointType: Interface
#      PrivateDnsEnabled: true
#      SubnetIds:
#        - !Ref PrivateSubnet
#      SecurityGroupIds:
#        - !Ref VPCEndpointSecurityGroup
#      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.monitoring'
#      VpcId: !Ref LakeFormationVPC
#  VPCEndpointCWL:
#    Type: 'AWS::EC2::VPCEndpoint'
#    Properties:
#      PolicyDocument:
#        Version: 2012-10-17
#        Statement:
#          - Effect: Allow
#            Principal: '*'
#            Action: '*'
#            Resource: '*'
#      VpcEndpointType: Interface
#      PrivateDnsEnabled: true
#      SubnetIds:
#        - !Ref PrivateSubnet
#      SecurityGroupIds:
#        - !Ref VPCEndpointSecurityGroup
#      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.logs'
#      VpcId: !Ref LakeFormationVPC
#  VPCEndpointECR:
#    Type: 'AWS::EC2::VPCEndpoint'
#    Properties:
#      PolicyDocument:
#        Version: 2012-10-17
#        Statement:
#          - Effect: Allow
#            Principal: '*'
#            Action: '*'
#            Resource: '*'
#      VpcEndpointType: Interface
#      PrivateDnsEnabled: true
#      SubnetIds:
#        - !Ref PrivateSubnet
#      SecurityGroupIds:
#        - !Ref VPCEndpointSecurityGroup
#      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ecr.dkr'
#      VpcId: !Ref LakeFormationVPC
#  VPCEndpointECRAPI:
#    Type: 'AWS::EC2::VPCEndpoint'
#    Properties:
#      PolicyDocument:
#        Version: 2012-10-17
#        Statement:
#          - Effect: Allow
#            Principal: '*'
#            Action: '*'
#            Resource: '*'
#      VpcEndpointType: Interface
#      PrivateDnsEnabled: true
#      SubnetIds:
#        - !Ref PrivateSubnet
#      SecurityGroupIds:
#        - !Ref VPCEndpointSecurityGroup
#      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ecr.api'
#      VpcId: !Ref LakeFormationVPC
#  SageMakerInstanceSecurityGroup:
#    Type: 'AWS::EC2::SecurityGroup'
#    Properties:
#      GroupName: SageMaker-SecurityGroup
#      GroupDescription: Security group with no ingress rule
#      SecurityGroupEgress:
#        - IpProtocol: -1
#          FromPort: -1
#          ToPort: -1
#          CidrIp: 0.0.0.0/0
#      VpcId: !Ref LakeFormationVPC
#  SageMakerInstanceSecurityGroupIngress:
#    Type: 'AWS::EC2::SecurityGroupIngress'
#    Properties:
#      IpProtocol: '-1'
#      GroupId: !Ref SageMakerInstanceSecurityGroup
#      SourceSecurityGroupId: !Ref SageMakerInstanceSecurityGroup
#  VPCEndpointSecurityGroup:
#    Type: 'AWS::EC2::SecurityGroup'
#    Properties:
#      GroupDescription: Allow TLS for VPC Endpoint
#      SecurityGroupEgress:
#        - IpProtocol: -1
#          FromPort: -1
#          ToPort: -1
#          CidrIp: 0.0.0.0/0
#      VpcId: !Ref LakeFormationVPC
#      Tags:
#        - Key: Name
#          Value: !Sub '${AWS::StackName}-endpoint-security-group'
#  EndpointSecurityGroupIngress:
#    Type: 'AWS::EC2::SecurityGroupIngress'
#    Properties:
#      IpProtocol: '-1'
#      GroupId: !Ref VPCEndpointSecurityGroup
#      SourceSecurityGroupId: !Ref SageMakerInstanceSecurityGroup

Outputs:
#  LakeFormationDataLakeBucketName:
#    Description: Lake Formation Data Lake Bucket Name
#    Value: !Ref DataLakeBucket
#  LakeFormationDemoBucketName:
#    Description: Lake Formation Demo Bucket Name
#    Value: !Ref LakeFormationDemoBucket
#  AthenaQueryResultLocation:
#    Description: Athena Query Result Location
#    Value: !Join 
#      - ''
#      - - 's3://'
#        - !Ref LakeFormationDemoBucket
#        - /athena-results/
#  MetadataLocation:
#    Description: Metadata Location
#    Value: !Join 
#      - ''
#      - - 's3://'
#        - !Ref LakeFormationDemoBucket
#        - /metadata
  UsersCredentials:
    Description: AWS Secrets Manager Secret Name for credentials of all users created by this template
    Value: !Sub >-
      https://${AWS::Region}.console.aws.amazon.com/secretsmanager/secret?name=${AWS::StackName}-users-credentials
#  ADFSUsersCredentials:
#    Description: AWS Secrets Manager Secret Name for all ADFS users credentials
#    Value: !Sub >-
#      https://${AWS::Region}.console.aws.amazon.com/secretsmanager/secret?name=${AWS::StackName}-adfs-users-credentials
#  ConsoleIAMLoginUrl: 
#    Description: Console IAM Login URL to try out different users
#    Value: !Join 
#      - ''
#      - - 'https://'
#        - !Ref 'AWS::AccountId'
#        - .signin.aws.amazon.com/console
#  PublicSubnet: 
#    Value: !Ref PublicSubnetOne
#  PrivateSubnet: 
#    Value: !Ref PrivateSubnet 
#  VpcId: 
#    Value: !Ref LakeFormationVPC
#  SageMakerSecurityGroup:
#    Value: !Ref SageMakerInstanceSecurityGroup
#  S3CertsZip:
#    Description: Location where pem files will be placed
#    Value: !Join 
#      - ''
#      - - 's3://'
#        - !Ref LakeFormationDemoBucket
#        - /my-certs.zip
