Description: CloudFormation template to create AWS Lake Formation workshop resources
Metadata: 
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Database Configuration
        Parameters:
          - TPCDBName
          - DBMasterUser
          - DBMasterPassword
      - Label:
          default: Misc Configuration
        Parameters:
          - EEKeyPair
          - LatestAmiId
    ParameterLabels:
      TPCDBName:
        default: Database Name
      DBMasterUser:
        default: Master Username
      DBMasterPassword:
        default: Master User Password
      EEKeyPair:
        default: EC2 Key Pair
      LatestAmiId:
        default: Latest AMI Id
Mappings:
  SubnetConfig:
    VPC:
      CIDR: 10.0.0.0/16
    PublicOne:
      CIDR: 10.0.0.0/24
    PublicTwo:
      CIDR: 10.0.1.0/24
    Private:
      CIDR: 10.0.2.0/24
  Constants:
    EC2InstanceType:
      Name: t2.small
    AutoHibernateTimeout:
      Name: 30
Parameters:
  TPCDBName:
    Type: String
    Default: tpc
    AllowedValues:
      - tpc
    Description: Name of the database that will be created.
  DBMasterUser:
    Type: String
    Default: tpcadmin
    Description: Master username for TPC database.
  DBMasterPassword:
    Type: String
    Default: BigData26!
    Description: Master password for TPC database.
  EEKeyPair:
    Description: Amazon EC2 Key Pair
    Type: 'AWS::EC2::KeyPair::KeyName'
    MinLength: 1
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
    AllowedValues:
      - /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
    Description: Image ID for the EC2 helper instance. DO NOT change this.
Resources:
  LakeFormationVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !FindInMap 
        - SubnetConfig
        - VPC
        - CIDR
      InstanceTenancy: default
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: LF-Workshop-VPC
  PrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !FindInMap 
        - SubnetConfig
        - Private
        - CIDR
      MapPublicIpOnLaunch: 'true'
      AvailabilityZone: !Select 
        - 1
        - !GetAZs 
          Ref: 'AWS::Region'
      VpcId: !Ref LakeFormationVPC
      Tags:
        - Key: Name
          Value: LF-Workshop-PrivateSubnet
  PublicSubnetOne:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !FindInMap 
        - SubnetConfig
        - PublicOne
        - CIDR
      MapPublicIpOnLaunch: 'true'
      AvailabilityZone: !Select 
        - 0
        - !GetAZs 
          Ref: 'AWS::Region'
      VpcId: !Ref LakeFormationVPC
      Tags:
        - Key: Name
          Value: LF-Workshop-PublicSubnetOne
  PublicSubnetTwo:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !FindInMap 
        - SubnetConfig
        - PublicTwo
        - CIDR
      MapPublicIpOnLaunch: 'true'
      AvailabilityZone: !Select 
        - 1
        - !GetAZs 
          Ref: 'AWS::Region'
      VpcId: !Ref LakeFormationVPC
      Tags:
        - Key: Name
          Value: LF-Workshop-PublicSubnetTwo
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: LF-Workshop-IG
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref LakeFormationVPC
      InternetGatewayId: !Ref InternetGateway
  InternetGatewayRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref LakeFormationVPC
  InternetGatewayRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref InternetGatewayRouteTable
      GatewayId: !Ref InternetGateway
  PublicSubnetOneRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref InternetGatewayRouteTable
      SubnetId: !Ref PublicSubnetOne
  PublicSubnetTwoRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref InternetGatewayRouteTable
      SubnetId: !Ref PublicSubnetTwo
  NATGatewayAttachment:
    Type: 'AWS::EC2::EIP'
    DependsOn: VPCGatewayAttachment
    Properties:
      Domain: vpc
  NATGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      SubnetId: !Ref PublicSubnetOne
      AllocationId: !GetAtt 
        - NATGatewayAttachment
        - AllocationId
      Tags:
        - Key: Name
          Value: LF-NAT-Gateway
  NATGatewayRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref LakeFormationVPC
      Tags:
        - Key: Name
          Value: LF-NAT-RouteTable
  NATGatewayRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref NATGatewayRouteTable
      NatGatewayId: !Ref NATGateway
  PrivateSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref NATGatewayRouteTable
      SubnetId: !Ref PrivateSubnet
  S3Endpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: '*'
            Principal: '*'
            Resource: '*'
      RouteTableIds:
        - !Ref NATGatewayRouteTable
        - !Ref InternetGatewayRouteTable
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcId: !Ref LakeFormationVPC
  GlueServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - glue.amazonaws.com
                - lakeformation.amazonaws.com
                - firehose.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole'
        - 'arn:aws:iam::aws:policy/AmazonKinesisFullAccess'
      Policies:
        - PolicyName: LF-Data-Lake-Storage-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource:
                  - !Join 
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref DataLakeBucket
                      - /*
                  - !Join 
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref DataLakeBucket
        - PolicyName: Glue-Demo-Access-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource:
                  - !Join 
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref LFWorkshopBucket
                      - /*
                  - !Join 
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref LFWorkshopBucket
        - PolicyName: LF-DataAccess-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'lakeformation:GetDataAccess'
                  - 'lakeformation:GrantPermissions'
                Resource: '*'
        - PolicyName: LF-Workflow-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'iam:PassRole'
                Resource:
                  - !Join 
                    - ''
                    - - 'arn:aws:iam::'
                      - !Ref 'AWS::AccountId'
                      - ':role/LF-GlueServiceRole'
                  - !Join 
                    - ''
                    - - 'arn:aws:iam::'
                      - !Ref 'AWS::AccountId'
                      - ':role/LakeFormationWorkflowRole'
      RoleName: LF-GlueServiceRole
  DataAnalystGlueServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - glue.amazonaws.com
                - lakeformation.amazonaws.com
                - firehose.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole'
        - 'arn:aws:iam::aws:policy/AmazonKinesisFullAccess'
      Policies:
        - PolicyName: DA-Data-Lake-Storage-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref DataLakeBucket
                      - /*
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref DataLakeBucket
        - PolicyName: DA-Glue-Access-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref LFWorkshopBucket
                      - /*
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref LFWorkshopBucket
        - PolicyName: DA-DataAccess-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'lakeformation:GetDataAccess'
                  - 'lakeformation:GrantPermissions'
                Resource: '*'
        - PolicyName: DA-Workflow-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'iam:PassRole'
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:iam::'
                      - !Ref 'AWS::AccountId'
                      - ':role/DA-GlueServiceRole'
                  - !Join
                    - ''
                    - - 'arn:aws:iam::'
                      - !Ref 'AWS::AccountId'
                      - ':role/LakeFormationWorkflowRole'
      RoleName: DA-GlueServiceRole
  DataEngineerGlueServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - glue.amazonaws.com
                - lakeformation.amazonaws.com
                - firehose.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole'
        - 'arn:aws:iam::aws:policy/AmazonKinesisFullAccess'
      Policies:
        - PolicyName: DE-Data-Lake-Storage-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref DataLakeBucket
                      - /*
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref DataLakeBucket
        - PolicyName: DE-Glue-Access-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref LFWorkshopBucket
                      - /*
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref LFWorkshopBucket
        - PolicyName: DE-DataAccess-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'lakeformation:GetDataAccess'
                  - 'lakeformation:GrantPermissions'
                Resource: '*'
        - PolicyName: DA-Workflow-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'iam:PassRole'
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:iam::'
                      - !Ref 'AWS::AccountId'
                      - ':role/DE-GlueServiceRole'
                  - !Join
                    - ''
                    - - 'arn:aws:iam::'
                      - !Ref 'AWS::AccountId'
                      - ':role/LakeFormationWorkflowRole'
      RoleName: DE-GlueServiceRole
  AmazonKinesisFirehoseFullAccess:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - firehose.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonKinesisFirehoseFullAccess'
      Policies:
        - PolicyName: LF-Stream-Data-Storage-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource:
                  - !Join 
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref DataLakeBucket
                      - /*
                  - !Join 
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref DataLakeBucket
      RoleName: LF-KinesisServiceRole
  DataLakeBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      BucketName: !Join 
        - '-'
        - - lf-data-lake
          - !Ref 'AWS::AccountId'
  LFWorkshopBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      BucketName: !Join 
        - '-'
        - - lf-workshop
          - !Ref 'AWS::AccountId'
  LFUsersPassword:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Description: Secret password for all workshop users
      Name: !Sub '${AWS::StackName}-lf-users-credentials'
      GenerateSecretString:
        SecretStringTemplate: '{"username":"all-lf-users"}'
        GenerateStringKey: password
        PasswordLength: 16
        ExcludeCharacters: '"@/\'
  ADFSUsersPassword:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Description: Secret password for all ADFS users
      Name: !Sub '${AWS::StackName}-adfs-users-credentials'
      SecretString: '{"username":"all-windows-users","password":"Password1!"}'
  DataAdminUser:
    Type: 'AWS::IAM::User'
    Properties:
      Path: /
      LoginProfile:
        Password: !Sub '{{resolve:secretsmanager:${LFUsersPassword}::password}}'
        PasswordResetRequired: false
      Policies:
        - PolicyName: LF-DataLake-Admin-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'iam:CreateServiceLinkedRole'
                Resource: '*'
                Condition:
                  StringEquals:
                    'iam:AWSServiceName': lakeformation.amazonaws.com
              - Effect: Allow
                Action:
                  - 'iam:PutRolePolicy'
                Resource: !Join 
                  - ''
                  - - 'arn:aws:iam::'
                    - !Ref 'AWS::AccountId'
                    - >-
                      :role/aws-service-role/lakeformation.amazonaws.com/AWSServiceRoleForLakeFormationDataAccess
              - Effect: Allow
                Action: 'iam:PassRole'
                Resource:
                  - 'arn:aws:iam::*:role/LF-GlueServiceRole'
        - PolicyName: LF-DataLake-Admin-RAM-Invitation-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ram:AcceptResourceShareInvitation'
                  - 'ram:RejectResourceShareInvitation'
                  - 'ec2:DescribeAvailabilityZones'
                  - 'ram:EnableSharingWithAwsOrganization'
                Resource: '*'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AWSLakeFormationDataAdmin'
        - 'arn:aws:iam::aws:policy/AWSGlueConsoleFullAccess'
        - 'arn:aws:iam::aws:policy/AWSLakeFormationCrossAccountManager'
        - 'arn:aws:iam::aws:policy/AWSCloudFormationFullAccess'
      UserName: lf-data-admin

### NOTE: NEXT 8 LINES ADDED ON 12 SEPTEMBER 2023 MANUALLY AND IS NOT IN THE WORKSHOP.
# add DatalakeAdmin as a DL Admin

  LFDataLakeSettings:
    DependsOn: DataAdminUser
    Type: AWS::LakeFormation::DataLakeSettings
    Properties:
      Admins:
        - DataLakePrincipalIdentifier: !GetAtt 'DataAdminUser.Arn'
        - DataLakePrincipalIdentifier: "arn:aws:iam::555344254085:user/DataLakeAdministrativeUser1"
      TrustedResourceOwners: []
      CreateDatabaseDefaultPermissions: []
      CreateTableDefaultPermissions: []
      Parameters:
        "CROSS_ACCOUNT_VERSION": "3"
# ALSO REMOVE IAMAllowedPrincipals FROM THE DATABASE CREATION PERMISSIONS
#/////////////////////////////////////////////////////////////////

# With the above steps, set up of Datalake Admin is complete

  DataScientistUser:
    Type: 'AWS::IAM::User'
    Properties:
      Path: /
      LoginProfile:
        Password: !Sub '{{resolve:secretsmanager:${LFUsersPassword}::password}}'
        PasswordResetRequired: false
      Policies:
        - PolicyName: LF-Athena-Query-Result-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:Put*'
                  - 's3:Get*'
                  - 's3:List*'
                Resource:
                  - !Join 
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref LFWorkshopBucket
                      - /athena-results/*
        - PolicyName: LF-Cell-Level-Filter-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'lakeformation:StartQueryPlanning'
                  - 'lakeformation:GetQueryState'
                  - 'lakeformation:GetWorkUnits'
                  - 'lakeformation:GetWorkUnitResults'
                Resource: '*'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonAthenaFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'
      UserName: lf-data-scientist
  DataAnalystUser:
    Type: 'AWS::IAM::User'
    Properties:
      Path: /
      LoginProfile:
        Password: !Sub '{{resolve:secretsmanager:${LFUsersPassword}::password}}'
        PasswordResetRequired: false
      Policies:
        - PolicyName: LF-Athena-Query-Result-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:Put*'
                  - 's3:Get*'
                  - 's3:List*'
                Resource:
                  - !Join 
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref LFWorkshopBucket
                      - /athena-results/*
        - PolicyName: LF-Athena-Run-Tagging-Query
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'lakeformation:StartQueryPlanning'
                  - 'lakeformation:GetQueryState'
                  - 'lakeformation:GetWorkUnits'
                  - 'lakeformation:GetWorkUnitResults'
                Resource: "*"
        - PolicyName: LF-PassRole
          PolicyDocument:
            Version: 2012-10-17
            Statement: 
              - Effect: Allow
                Action: 'iam:PassRole'
                Resource:
                  - 'arn:aws:iam::*:role/DA-GlueServiceRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonAthenaFullAccess'
        - 'arn:aws:iam::aws:policy/AWSGlueConsoleFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonRedshiftDataFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonRedshiftFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonRedshiftQueryEditorV2FullAccess'
      UserName: lf-data-analyst
  DataEngineerUser:
    Type: 'AWS::IAM::User'
    Properties:
      Path: /
      LoginProfile:
        Password: !Sub '{{resolve:secretsmanager:${LFUsersPassword}::password}}'
        PasswordResetRequired: false
      Policies:
        - PolicyName: LF-Athena-Query-Result-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:Put*'
                  - 's3:Get*'
                  - 's3:List*'
                Resource:
                  - !Join 
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref LFWorkshopBucket
                      - /athena-results/*
        - PolicyName: LF-PassRole
          PolicyDocument:
            Version: 2012-10-17
            Statement: 
              - Effect: Allow
                Action: 'iam:PassRole'
                Resource:
                  - 'arn:aws:iam::*:role/DE-GlueServiceRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonAthenaFullAccess'
        - 'arn:aws:iam::aws:policy/AWSGlueConsoleFullAccess'
      UserName: lf-data-engineer
  EC2Role:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /
      RoleName: EC2Role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'
  EC2InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref EC2Role
  BackUpRestoreInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t2.small
      ImageId: !Ref LatestAmiId
      KeyName: !Ref EEKeyPair
      IamInstanceProfile: !Ref EC2InstanceProfile
      NetworkInterfaces:
        - AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          SubnetId: !Ref PublicSubnetOne
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -ex
            - |
              sudo yum -y install mysql
            - >
              aws s3 cp
              s3://aws-data-analytics-workshops/shared_datasets/tpcparquet/
              /tmp/tpcparquet/ --recursive
            - 'aws s3 cp /tmp/tpcparquet/ s3://'
            - !Ref DataLakeBucket
            - |
              /tpcparquet/ --recursive
            - |+

            - >
              aws s3 cp
              s3://aws-data-analytics-workshops/lake-formation-workshop/sampledata/tripdata.csv
              /tmp/
            - 'aws s3 cp /tmp/tripdata.csv s3://'
            - !Ref LFWorkshopBucket
            - |
              /glue/nyctaxi/
            - >
              aws s3 cp
              s3://aws-data-analytics-workshops/lake-formation-workshop/scripts/nyctaxi-csv-to-json.py
              /tmp/
            - 'aws s3 cp /tmp/nyctaxi-csv-to-json.py s3://'
            - !Ref LFWorkshopBucket
            - |
              /glue/scripts/

      Tags:
        - Key: Name
          Value: EC2-DB-Loader
  GlueCrawler:
    Type: 'AWS::Glue::Crawler'
    Properties:
      DatabaseName: tpc
      Description: AWS Glue Crawler to crawl parquet data
      Name: TPC Crawler
      Role: !GetAtt 
        - GlueServiceRole
        - Arn
      Targets:
        S3Targets:
          - Path: !Join 
              - ''
              - - !Ref DataLakeBucket
                - /tpcparquet/
      SchemaChangePolicy:
        UpdateBehavior: UPDATE_IN_DATABASE
        DeleteBehavior: LOG
#  AWSCloud9SSMAccessRole:
#    Type: AWS::IAM::Role
#    Properties:
#      AssumeRolePolicyDocument:
#        Version: 2012-10-17
#        Statement:
#          - Effect: Allow
#            Principal:
#              Service:
#              - cloud9.amazonaws.com
#              - ec2.amazonaws.com
#            Action:
#              - 'sts:AssumeRole'
#      Description: 'Service linked role for AWS Cloud9'
#      Path: '/service-role/'
#      ManagedPolicyArns:
#        - arn:aws:iam::aws:policy/AWSCloud9SSMInstanceProfile
#      RoleName: 'AWSCloud9SSMAccessRole'

#  AWSCloud9SSMInstanceProfile:
#    Type: "AWS::IAM::InstanceProfile"
#    Properties:
#      InstanceProfileName: AWSCloud9SSMInstanceProfile
#      Path: "/cloud9/"
#      Roles:
#        -
#          Ref: AWSCloud9SSMAccessRole
#  C9IDE:
#    Type: 'AWS::Cloud9::EnvironmentEC2'
#    DependsOn: AWSCloud9SSMAccessRole
#    Properties:
#      Name: Cloud9-IDE-For-EMR
#      Description: Cloud9 IDE to prepare the certs
#      AutomaticStopTimeMinutes: !FindInMap
#        - Constants
#        - AutoHibernateTimeout
#        - Name
#      SubnetId: !Ref PrivateSubnet
#      InstanceType: !FindInMap
#        - Constants
#        - EC2InstanceType
#        - Name
#      ConnectionType: CONNECT_SSM
#  #    OwnerArn: !Sub >-
#  #      arn:aws:sts::${AWS::AccountId}:assumed-role/WSParticipantRole/Participant
  VPCEndpointSagemakerAPI:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: '*'
            Resource: '*'
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.sagemaker.api'
      VpcId: !Ref LakeFormationVPC
  VPCEndpointSageMakerRuntime:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: '*'
            Resource: '*'
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.sagemaker.runtime'
      VpcId: !Ref LakeFormationVPC
  VPCEndpointSTS:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: '*'
            Resource: '*'
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.sts'
      VpcId: !Ref LakeFormationVPC
  VPCEndpointCW:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: '*'
            Resource: '*'
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.monitoring'
      VpcId: !Ref LakeFormationVPC
  VPCEndpointCWL:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: '*'
            Resource: '*'
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.logs'
      VpcId: !Ref LakeFormationVPC
  VPCEndpointECR:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: '*'
            Resource: '*'
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ecr.dkr'
      VpcId: !Ref LakeFormationVPC
  VPCEndpointECRAPI:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: '*'
            Resource: '*'
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ecr.api'
      VpcId: !Ref LakeFormationVPC
  SageMakerInstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: SageMaker-SecurityGroup
      GroupDescription: Security group with no ingress rule
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
      VpcId: !Ref LakeFormationVPC
  SageMakerInstanceSecurityGroupIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      IpProtocol: '-1'
      GroupId: !Ref SageMakerInstanceSecurityGroup
      SourceSecurityGroupId: !Ref SageMakerInstanceSecurityGroup
  VPCEndpointSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow TLS for VPC Endpoint
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
      VpcId: !Ref LakeFormationVPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-endpoint-security-group'
  EndpointSecurityGroupIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      IpProtocol: '-1'
      GroupId: !Ref VPCEndpointSecurityGroup
      SourceSecurityGroupId: !Ref SageMakerInstanceSecurityGroup
Outputs:
  LFDataLakeBucketName:
    Description: Lake Formation Data Lake Bucket Name
    Value: !Ref DataLakeBucket
  LFWorkshopBucketName:
    Description: Lake Formation Workshop Bucket Name
    Value: !Ref LFWorkshopBucket
  AthenaQueryResultLocation:
    Description: Athena Query Result Location
    Value: !Join 
      - ''
      - - 's3://'
        - !Ref LFWorkshopBucket
        - /athena-results/
  MetadataLocation:
    Description: Metadata Location
    Value: !Join 
      - ''
      - - 's3://'
        - !Ref LFWorkshopBucket
        - /metadata
  LFUsersCredentials:
    Description: AWS Secrets Manager Secret Name for all workshop users credentials
    Value: !Sub >-
      https://${AWS::Region}.console.aws.amazon.com/secretsmanager/secret?name=${AWS::StackName}-lf-users-credentials
  ADFSUsersCredentials:
    Description: AWS Secrets Manager Secret Name for all ADFS users credentials
    Value: !Sub >-
      https://${AWS::Region}.console.aws.amazon.com/secretsmanager/secret?name=${AWS::StackName}-adfs-users-credentials
  ConsoleIAMLoginUrl: 
    Description: Console IAM Login URL to try out different users
    Value: !Join 
      - ''
      - - 'https://'
        - !Ref 'AWS::AccountId'
        - .signin.aws.amazon.com/console
  PublicSubnet: 
    Value: !Ref PublicSubnetOne
#
  PrivateSubnet: 
    Value: !Ref PrivateSubnet 
  VpcId: 
    Value: !Ref LakeFormationVPC
  SageMakerSecurityGroup:
    Value: !Ref SageMakerInstanceSecurityGroup
  S3CertsZip:
    Description: Location where pem files will be placed
    Value: !Join 
      - ''
      - - 's3://'
        - !Ref LFWorkshopBucket
        - /my-certs.zip

#S3BucketNameForOutput: "lf-workshop-555344254085"
#VPC: $customFunction.sys:lakehouse-core.foundationOutput.VpcId
#PrivateSubnet: "subnet-0bcd551fdfba3e147"
#SageMakerSecurityGroup: "sg-0e89bf59f8d0b5403"
#S3CertsZip: s3://lf-workshop-555344254085/my-certs.zip
